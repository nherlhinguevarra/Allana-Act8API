private void getbtn_Click(object sender, EventArgs e)
        {
            using (var client = new HttpClient())
            {
                var response = client.GetAsync("http://localhost/myapi/api.php?action=getUsers").Result;
                if (response.IsSuccessStatusCode)
                {
                    var jsonData = response.Content.ReadAsStringAsync().Result;
                    var users = JsonConvert.DeserializeObject<List<User>>(jsonData);

                    DataTable dataTable = new DataTable();
                    dataTable.Columns.Add("Username");
                    dataTable.Columns.Add("Password");
                    dataTable.Columns.Add("Email");
                    dataTable.Columns.Add("Department Name");
                    dataTable.Columns.Add("Total Salary");

                    foreach (var user in users)
                    {
                        dataTable.Rows.Add(user.username, user.pass, user.email, user.dname, user.totalsalary);
                    }

                    datagrid_output.DataSource = dataTable;
                }
                else
                {
                    MessageBox.Show("Failed to fetch data from the server.");
                }
            }
        }






using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Net.Http;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json;
using static Activity8.employee;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace Activity8
{
    public partial class employee : Form
    {
        private static readonly HttpClient client = new HttpClient();
        private List<Department> departments = new List<Department>();
        private List<TotalSalary> salaries = new List<TotalSalary>();

        public employee()
        {
            InitializeComponent();
            FetchDeptandSalary().Wait();
        }

        private async void GetButton_Click(object sender, EventArgs e)
        {
            try
            {
                var response = await client.GetStringAsync("http://localhost/api.php?type=user");
                var users = JsonConvert.DeserializeObject<List<User>>(response);

                DataTable dt = new DataTable();
                dt.Columns.Add("Username");
                dt.Columns.Add("Password");
                dt.Columns.Add("Email");
                dt.Columns.Add("Department");
                dt.Columns.Add("Total Salary");

                foreach (var user in users)
                {
                    dt.Rows.Add(user.username, user.pass, user.email, user.dname, user.totalsalary);
                }

                HR_dataGridView.DataSource = dt;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failure to get data from server: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void PostButton_Click(object sender, EventArgs e)
        {
            try
            {
                int selectedDeptId = GetSelectedDeptId();
                int selectedSalId = GetSelectedSalId(selectedDeptId);

                var userData = new User
                {
                    username = UsernameTB.Text,
                    pass = PasswordTB.Text,
                    email = EmailTB.Text,
                    dept_id = selectedDeptId,
                    sal_id = selectedSalId
                };

                var content = new StringContent(JsonConvert.SerializeObject(userData), Encoding.UTF8, "application/json");
                var response = await client.PostAsync("http://localhost/api.php", content);

                MessageBox.Show(await response.Content.ReadAsStringAsync());
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failure to post data: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private int GetSelectedDeptId()
        {
            if (TechRB.Checked)
                return departments.Find(d => d.dname == "Tech").dnumber;
            if (ResearchRB.Checked)
                return departments.Find(d => d.dname == "Research").dnumber;
            if (PayrollRB.Checked)
                return departments.Find(d => d.dname == "Payroll").dnumber;

            return -1;
        }

        private int GetSelectedSalId(int deptId)
        {
            return salaries.Find(s => s.dnumber == deptId).dnumber;
        }

        private async Task FetchDeptandSalary()
        {
            try
            {
                var deptResponse = await client.GetStringAsync("http://localhost/api.php?type=dept");
                departments = JsonConvert.DeserializeObject<List<Department>>(deptResponse);

                var salaryResponse = await client.GetStringAsync("http://localhost/api.php?type=salary");
                salaries = JsonConvert.DeserializeObject<List<TotalSalary>>(salaryResponse);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void TechRB_CheckedChanged(object sender, EventArgs e)
        {
            if (TechRB.Checked)
            {
                int selectedDeptId = departments.Find(d => d.dname == "Tech").dnumber;
                SalaryTB.Text = salaries.Find(s => s.dnumber == selectedDeptId).totalsalary.ToString();
            }
        }

        private void ResearchRB_CheckedChanged(object sender, EventArgs e)
        {
            if (ResearchRB.Checked)
            {
                int selectedDeptId = departments.Find(d => d.dname == "Research").dnumber;
                SalaryTB.Text = salaries.Find(s => s.dnumber == selectedDeptId).totalsalary.ToString();
            }
        }

        private void PayrollRB_CheckedChanged(object sender, EventArgs e)
        {
            if (PayrollRB.Checked)
            {
                int selectedDeptId = departments.Find(d => d.dname == "Payroll").dnumber;
                SalaryTB.Text = salaries.Find(s => s.dnumber == selectedDeptId).totalsalary.ToString();
            }
        }

        public class User
        {
            public string username { get; set; }
            public string pass { get; set; }
            public string email { get; set; }
            public string dname { get; set; }
            public int totalsalary { get; set; }
            public int dept_id { get; set; }
            public int sal_id { get; set; }
        }

        public class Department
        {
            public int dnumber { get; set; }
            public string dname { get; set; }
        }

        public class TotalSalary
        {
            public int dnumber { get; set; }
            public int totalsalary { get; set; }
        }
    }
}

447, 708

//  MessageBox.Show("Failure to get data from server!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

****


NINANG:

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Http;
using Newtonsoft.Json;
using System.Xml.Linq;
using Newtonsoft.Json.Linq;


namespace Act8API
{
    public partial class Form1 : Form
    {
        private readonly string apiUrl = "http://localhost/myapi/act8api.php";
        private string selectedDepartment = "";

        public Form1()
        {
            InitializeComponent();
            
        }

        private async void cardioBtn_CheckedChanged(object sender, EventArgs e)
        {
            selectedDepartment = "Cardiology";
            await FetchDoctorAndAvailableDate();
        }

        private async void hemeBtn_CheckedChanged(object sender, EventArgs e)
        {
            selectedDepartment = "Hematology";
            await FetchDoctorAndAvailableDate();
        }

        private async void pulmoBtn_CheckedChanged(object sender, EventArgs e)
        {
            selectedDepartment = "Pulmonology";
            await FetchDoctorAndAvailableDate();
        }

        private async Task FetchDoctorAndAvailableDate()
        {
            using (HttpClient client = new HttpClient())
            {
                HttpResponseMessage response = await client.GetAsync($"{apiUrl}?department={selectedDepartment}");

                if (response.IsSuccessStatusCode)
                {
                    string json = await response.Content.ReadAsStringAsync();
                    var data = JObject.Parse(json);

                    if (data["error"] == null)
                    {
                        doctortb.Text = data["doctor"].ToString(); 
                        datetb.Text = data["available_date"].ToString(); 
                        await FetchDoctorAndAvailableDate();
;                       
                    }
                    else
                    {
                        MessageBox.Show(data["error"].ToString());
                    }
                }
                else
                {
                    MessageBox.Show("Failed to retrieve data from the server. Status code: " + response.StatusCode);
                }
            }
        }



        private async void getBtn_Click(object sender, EventArgs e)
        {
            using (HttpClient client = new HttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(apiUrl);

                if (response.IsSuccessStatusCode)
                {
                    string json = await response.Content.ReadAsStringAsync();
                    var data = JArray.Parse(json);
                    gunaDataGridView1.DataSource = data.ToObject<DataTable>();
                }
                else
                {
                    MessageBox.Show("Failed to retrieve data from the server. Status code: " + response.StatusCode);
                }
            }
        }


        private async void postBtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(selectedDepartment))
            {
                MessageBox.Show("Please select a department.");
                return;
            }

            var patientData = new
            {
                first_name = fnametb.Text,
                last_name = lnametb.Text,
                department = selectedDepartment,
                doctor = doctortb.Text,
                available_date = datetb.Text
            };

            string json = JsonConvert.SerializeObject(patientData);

            using (HttpClient client = new HttpClient())
            {
                StringContent content = new StringContent(json, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(apiUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    string responseBody = await response.Content.ReadAsStringAsync();
                    MessageBox.Show(responseBody);
                }
                else
                {
                    MessageBox.Show("Failed to post data to the server. Status code: " + response.StatusCode);
                }
            }
        }
 
    }
}


var selectedDepartment = departments[comboBox1.SelectedIndex];
            int dnumber = selectedDepartment.dnumber;

            using (var client = new HttpClient())
            {
                var response = await client.GetAsync($"http://localhost/myapi/api.php?action=getTotalSalary&dnumber={dnumber}");
                if (response.IsSuccessStatusCode)
                {
                    var jsonData = await response.Content.ReadAsStringAsync();
                    var totalsalary = JsonConvert.DeserializeObject<TotalSalary>(jsonData);
                    salarytxt.Text = totalsalary.totalsalary.ToString();
                }
                else
                {
                    MessageBox.Show("Failed to fetch total salary from the server.");
                }
            }